{"version":3,"sources":["server/ioserver.js"],"names":["ioserverMixmin","io","userCountOnline","usersOnline","broadcast","socket","message","emit","getHashByNickName","nickName","encodeURIComponent","decodeNickName","decodeURIComponent","on","time","Date","toLocaleString","fn","res","code","name","client"],"mappings":";;;;;kBAOwBA,c;;AAJxB;;AAIe,SAASA,cAAT,CAAwBC,EAAxB,EAA4B;AACvC;AACA,QAAIC,kBAAkB,CAAtB;AACA;AACA,UAAMC,cAAc,EAApB;;AAEA,aAASC,SAAT,CAAmBC,MAAnB,EAA2BC,OAA3B,EAAoC;AAChC;AACAD,eAAOD,SAAP,CAAiBG,IAAjB,CAAsB,WAAtB,EAAmCD,OAAnC;AACH;;AAED,aAASE,iBAAT,CAA2BC,QAA3B,EAAqC;AACjC,eAAOC,mBAAmBD,QAAnB,CAAP;AACH;;AAED,aAASE,cAAT,CAAwBF,QAAxB,EAAkC;AAC9B,eAAOG,mBAAmBH,QAAnB,CAAP;AACH;;AAEDR,OAAGY,EAAH,CAAM,YAAN,EAAqBR,MAAD,IAAY;AAC5B,wBAAI,SAAJ;;AAEA;AACAA,eAAOE,IAAP,CAAY,MAAZ,EAAoB;AAChBO,kBAAO,IAAIC,IAAJ,EAAD,CAAaC,cAAb;AADU,SAApB;;AAIAX,eAAOQ,EAAP,CAAU,OAAV,EAAmB,CAACJ,QAAD,EAAWQ,EAAX,KAAkB;AACjC,kBAAMC,MAAM,EAAZ;;AAEA,gBAAIf,YAAYK,kBAAkBC,QAAlB,CAAZ,CAAJ,EAA8C;AAC1CS,oBAAIC,IAAJ,GAAW,CAAX;AACAD,oBAAIZ,OAAJ,GAAc,MAAd;;AAEAW,mBAAGC,GAAH;;AAEA;AACH;AACD,kBAAME,OAAOZ,kBAAkBC,QAAlB,CAAb;AACA,kBAAMY,SAAS;AACXD,oBADW;AAEXf;AAFW,aAAf;;AAKAA,mBAAOe,IAAP,GAAcA,IAAd;AACAjB,wBAAYiB,IAAZ,IAAoBC,MAApB;AACAnB;AACA,4BAAK,GAAEO,QAAS,IAAhB;;AAEAS,gBAAIC,IAAJ,GAAW,CAAX;AACAD,gBAAIZ,OAAJ,GAAe,SAAQJ,eAAgB,EAAvC;;AAEAe,eAAGC,GAAH;;AAEAd,sBAAUC,MAAV,EAAmB,KAAII,QAAS,cAAaP,eAAgB,EAA7D;AACH,SA5BD;;AA8BAG,eAAOQ,EAAP,CAAU,2BAAV,EAAwCP,OAAD,IAAa;AAChD,4BAAK,UAASA,OAAQ,EAAtB;;AAEAD,mBAAOD,SAAP,CAAiBG,IAAjB,CAAsB,2BAAtB,EAAmDD,OAAnD;AACH,SAJD;;AAMAD,eAAOQ,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC1B;AACA,kBAAMO,OAAOf,OAAOe,IAApB;;AAEA,gBAAIjB,YAAYiB,IAAZ,CAAJ,EAAuB;AACnB,uBAAOjB,YAAYiB,IAAZ,CAAP;AACAlB;AACA,gCAAK,GAAES,eAAeS,IAAf,CAAqB,MAA5B;;AAEAhB,0BAAUC,MAAV,EAAmB,GAAEM,eAAeS,IAAf,CAAqB,cAAalB,eAAgB,EAAvE;AACH;;AAED,4BAAI,SAAJ;AACH,SAbD;AAcH,KA1DD;AA2DH,C,CArFD","file":"ioserver.js","sourcesContent":["/**\n * socketio的一套测试程序\n */\nimport {\n    log,\n} from '../util/debug';\n\nexport default function ioserverMixmin(io) {\n    // 连接的客户端数\n    let userCountOnline = 0;\n    // 连接的用户\n    const usersOnline = {};\n    \n    function broadcast(socket, message) {\n        // 向其他用户发送消息\n        socket.broadcast.emit('broadcast', message);\n    }\n\n    function getHashByNickName(nickName) {\n        return encodeURIComponent(nickName);\n    }\n    \n    function decodeNickName(nickName) {\n        return decodeURIComponent(nickName);\n    }\n\n    io.on('connection', (socket) => {\n        log('一个客户端连接');\n\n        // 通知客户端已经连接\n        socket.emit('open', {\n            time: (new Date()).toLocaleString(),\n        });\n\n        socket.on('login', (nickName, fn) => {\n            const res = {};\n\n            if (usersOnline[getHashByNickName(nickName)]) {\n                res.code = 0;\n                res.message = '昵称重复';\n\n                fn(res);\n\n                return;\n            }\n            const name = getHashByNickName(nickName);\n            const client = {\n                name,\n                socket,\n            };\n\n            socket.name = name;\n            usersOnline[name] = client;\n            userCountOnline++;\n            log(`${nickName}登陆`);\n\n            res.code = 1;\n            res.message = `当前用户数:${userCountOnline}`;\n\n            fn(res);\n            \n            broadcast(socket, `欢迎${nickName}登陆成功,当前用户数:${userCountOnline}`);\n        });\n\n        socket.on('group chat message server', (message) => {\n            log(`一个群聊信息:${message}`);\n            \n            socket.broadcast.emit('group chat message client', message);\n        });\n\n        socket.on('disconnect', () => {\n            // 失联\n            const name = socket.name;\n\n            if (usersOnline[name]) {\n                delete usersOnline[name];\n                userCountOnline--;\n                log(`${decodeNickName(name)}退出登陆`);\n                \n                broadcast(socket, `${decodeNickName(name)}退出登陆,当前用户数:${userCountOnline}`);\n            }\n\n            log('一个客户端失联');\n        });\n    });\n}"]}