{"version":3,"sources":["server/ioserver.js"],"names":["ioserverMixmin","io","userCountOnline","usersOnline","broadcast","socket","message","emit","encodeNickName","nickName","encodeURIComponent","decodeNickName","decodeURIComponent","on","time","Date","toLocaleString","fn","res","name","code","client","assignSocket","sender","data","receiver","targetSocket"],"mappings":"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","file":"ioserver.js","sourcesContent":["/**\n * socketio的一套测试程序\n */\nimport {\n    log,\n} from '../util/debug';\n\nexport default function ioserverMixmin(io) {\n    // 连接的客户端数\n    let userCountOnline = 0;\n    // 连接的用户\n    const usersOnline = {};\n    \n    function broadcast(socket, message) {\n        // 向其他用户发送消息\n        socket.broadcast.emit('broadcast', message);\n    }\n\n    function encodeNickName(nickName) {\n        return encodeURIComponent(nickName);\n    }\n    \n    function decodeNickName(nickName) {\n        return decodeURIComponent(nickName);\n    }\n\n    io.on('connection', (socket) => {\n        log('一个客户端连接');\n\n        // 通知客户端已经连接\n        socket.emit('open', {\n            time: (new Date()).toLocaleString(),\n        });\n\n        socket.on('login', (nickName, fn) => {\n            const res = {};\n            const name = encodeNickName(nickName);\n\n            if (usersOnline[name]) {\n                res.code = 0;\n                res.message = '昵称重复';\n\n                fn(res);\n\n                return;\n            }\n            \n            const client = {\n                name,\n                socket,\n            };\n            \n            const assignSocket = socket;\n            \n            assignSocket.name = name;\n            usersOnline[name] = client;\n            userCountOnline++;\n            log(`${nickName}登陆`);\n\n            res.code = 1;\n            res.message = `当前用户数:${userCountOnline}`;\n\n            fn(res);\n            \n            broadcast(socket, `欢迎${nickName}登陆成功,当前用户数:${userCountOnline}`);\n        });\n\n        socket.on('group chat message server', (message) => {\n            log(`一个群聊信息:${message}`);\n            \n            const name = socket.name;\n            \n            // 发送给自己的消息\n            socket.emit('group chat message client', {\n                message,\n                sender: decodeNickName(name),\n            });\n            \n            socket.broadcast.emit('group chat message client', {\n                message,\n                sender: decodeNickName(name),\n            });\n        });\n        \n        socket.on('private chat message server', (data, fn) => {\n            log(`一个私聊信息:${JSON.stringify(data)}`);\n            \n            const receiver = encodeNickName(data.receiver);\n            const name = socket.name;\n            const res = {};\n            \n            if (usersOnline[receiver]) {\n                const targetSocket = usersOnline[receiver].socket;\n                \n                // 发送给私聊对象\n                targetSocket.emit('private chat message client', {\n                    message: data.message,\n                    sender: decodeNickName(name),\n                });\n                \n                res.code = 1;\n                res.message = '私聊成功';\n                fn(res);\n            } else {\n                // 私聊对象不存在\n                res.code = 0;\n                res.message = '私聊对象未上线';\n                fn(res);\n            }\n        });\n\n        socket.on('disconnect', () => {\n            // 失联\n            const name = socket.name;\n\n            if (usersOnline[name]) {\n                delete usersOnline[name];\n                userCountOnline--;\n                log(`${decodeNickName(name)}退出登陆`);\n                \n                broadcast(socket, `${decodeNickName(name)}退出登陆,当前用户数:${userCountOnline}`);\n            }\n\n            log('一个客户端失联');\n        });\n    });\n}"]}