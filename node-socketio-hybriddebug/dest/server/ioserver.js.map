{"version":3,"sources":["server/ioserver.js"],"names":["ioserverMixmin","io","debugRoomsOnline","debugClientsOnline","encodeId","id","encodeURIComponent","decodeId","decodeURIComponent","broadcastInRoom","roomId","event","data","room","clients","forEach","clientId","socket","emit","on","time","Date","toLocaleString","fn","encodeRoomId","res","code","message","assignSocket","connectId","encodeClientId","client","addClient","clientCount","getClientsCount","destroy","removeClient"],"mappings":"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","file":"ioserver.js","sourcesContent":["/**\n * socketio的hybrid调试后台\n */\nimport DebugRoom from './debugroom';\nimport DebugClient from './debugclient';\nimport {\n    log,\n} from '../util/debug';\n\nexport default function ioserverMixmin(io) {\n    // 在线的房间，key值为roomid，value为Room对象\n    const debugRoomsOnline = {};\n    // 所有的客户端，方便检索\n    const debugClientsOnline = {};\n\n    function encodeId(id) {\n        return encodeURIComponent(id);\n    }\n\n    function decodeId(id) {\n        return decodeURIComponent(id);\n    }\n\n    function broadcastInRoom(roomId, event, data) {\n        if (!debugRoomsOnline[roomId]) {\n            return;\n        }\n        const room = debugRoomsOnline[roomId];\n        const clients = room.clients;\n\n        Object.keys(clients).forEach((clientId) => {\n            clients[clientId].socket.emit(event, data);\n        });\n    }\n\n    io.on('connection', (socket) => {\n        log('一个客户端或房间连接');\n\n        // 通知客户端已经连接\n        socket.emit('open', {\n            time: (new Date()).toLocaleString(),\n        });\n\n        // 创建房间号\n        socket.on('create room', (roomId, fn) => {\n            const encodeRoomId = encodeId(roomId);\n            let res;\n\n            if (debugRoomsOnline[encodeRoomId]) {\n                res = {\n                    code: 0,\n                    message: 'roomId重复',\n                };\n\n                fn(res);\n\n                return;\n            }\n\n            const room = new DebugRoom(encodeRoomId, socket);\n            const assignSocket = socket;\n\n            assignSocket.connectId = encodeRoomId;\n            debugRoomsOnline[encodeRoomId] = room;\n\n            res = {\n                code: 1,\n                message: `${roomId}创建成功`,\n            };\n\n            fn(res);\n\n            log(`房间${roomId}创建成功`);\n        });\n\n        // 创建客户端\n        socket.on('create client', (data, fn) => {\n            const clientId = data.clientId;\n            const roomId = data.roomId;\n            const encodeClientId = encodeId(clientId);\n            const encodeRoomId = encodeId(roomId);\n            const room = debugRoomsOnline[encodeRoomId];\n\n            let res;\n\n            if (debugClientsOnline[encodeClientId]) {\n                res = {\n                    code: 0,\n                    message: 'clientId重复',\n                };\n\n                fn(res);\n\n                return;\n            } else if (!room) {\n                res = {\n                    code: 0,\n                    message: 'client对应的room不存在',\n                };\n\n                fn(res);\n\n                return;\n            }\n\n            const client = new DebugClient(encodeRoomId, encodeClientId, socket);\n            const assignSocket = socket;\n\n            assignSocket.connectId = encodeClientId;\n            // 添加房间\n            room.addClient(client);\n            debugClientsOnline[encodeClientId] = client;\n\n            res = {\n                code: 1,\n                message: `${roomId}:${clientId}创建成功`,\n            };\n\n            fn(res);\n\n            // 通知房间\n            room.socket.emit('client created', {\n                time: (new Date()).toLocaleString(),\n                clientId,\n                roomId,\n                clientCount: room.getClientsCount(),\n            });\n\n            log(`客户端${clientId}加入房间${roomId}成功`);\n        });\n\n        // 房间分发数据\n        socket.on('dispatch data', (data, fn) => {\n            const encodeRoomId = socket.connectId;\n            const roomId = decodeId(encodeRoomId);\n\n            log(`房间${roomId}分发一条数据:${JSON.stringify(data)}`);\n\n            // 房间内部广播\n            broadcastInRoom(encodeRoomId, 'receive dispatch data', data);\n\n            fn({\n                code: 1,\n                message: `房间${roomId}分发数据成功`,\n            });\n        });\n\n        socket.on('client excute notify', (data) => {\n            const encodeClientId = socket.connectId;\n            const client = debugClientsOnline[encodeClientId];\n            const encodeRoomId = client.roomId;\n            const room = debugRoomsOnline[encodeRoomId];\n\n            if (room) {\n                // 通知房间\n                room.socket.emit('client excuted', data);\n            }\n        });\n\n        socket.on('disconnect', () => {\n            // connectId此时已经编码\n            const connectId = socket.connectId;\n\n            if (debugRoomsOnline[connectId]) {\n                // 如果是房间失联-释放所有的客户端\n                debugRoomsOnline[connectId].destroy();\n                delete debugRoomsOnline[connectId];\n\n                log(`${decodeId(connectId)}房间销毁`);\n            } else if (debugClientsOnline[connectId]) {\n                // 房间销毁后，里面的各个客户端接下来都会逐渐失联\n                // 否则如果是某一个客户端失联\n                // 首先检查对应的房间是否存在，如果房间已经不存在了代表已经被销毁了\n                const client = debugClientsOnline[connectId];\n\n                // 先检查客户端是否已经销毁，已经销毁了不会有id\n                if (client.id) {\n                    // 如果还没有销毁，代表可能只是客户端主动失联\n                    const room = debugRoomsOnline[client.roomId];\n\n                    if (room) {\n                        // 如果对应的房间还存在，先从房间中移除客户端\n                        // 当然，理论上来说这时候是肯定有房间的\n                        room.removeClient(client);\n\n                        // 通知房间\n                        room.socket.emit('client destroy', {\n                            time: (new Date()).toLocaleString(),\n                            clientId: decodeId(connectId),\n                            clientCount: room.getClientsCount(),\n                        });\n                    } else {\n                        // 仅仅是防止没有房间的客户端存在\n                        client.destroy();\n                    }\n                }\n                // 否则可以肯定客户端已经被销毁了的，直接删除引用\n                delete debugClientsOnline[connectId];\n\n                log(`${decodeId(connectId)}客户端销毁`);\n            }\n\n            log('一个客户端或房间失联');\n        });\n    });\n}"]}